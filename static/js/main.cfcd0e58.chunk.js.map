{"version":3,"sources":["media/Noam.svg","media/LBB.png","media/ZPB.png","media/headshot.jpg","components/header.tsx","components/imgModal.tsx","components/about.tsx","components/jumbotron.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","logo","height","width","backgroundColor","bar","boxShadow","NavBar","classes","AppBar","position","Toolbar","className","src","alt","imageStyle","maxHeight","closeButtonStyle","float","padding","ImageModal","props","Dialog","onClose","open","isOpen","DialogTitle","imageTitle","IconButton","aria-label","onClick","imageSource","altTextForImage","root","textAlign","header","marginBottom","fontSize","ptext","margin","lineHeight","linkText","cursor","color","textDecoration","About","React","ziggyOpen","setZiggyOpen","ladyOpen","setLadyOpen","LBB","ZPB","headshotPic","display","flexDirection","bigBlock","marginTop","marginLeft","Jumbotron","headshot","App","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","responsiveFontSizes","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfcd0e58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Noam.5cbad769.svg\";","module.exports = __webpack_public_path__ + \"static/media/LBB.ba185a96.png\";","module.exports = __webpack_public_path__ + \"static/media/ZPB.68af9c7a.png\";","module.exports = __webpack_public_path__ + \"static/media/headshot.76a62d2c.jpg\";","import * as React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport logo from '../media/Noam.svg';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        logo: {\n            height: \"75px\",\n            width: \"75px\",\n            backgroundColor: \"#b3b3e6\"\n        },\n        bar: {\n            boxShadow: \"0px 0.5px 9px #b3b3e6\"\n        }\n    })\n); \n\nexport const NavBar: React.FunctionComponent = () => {\n    const classes = useStyles();\n    return(\n        <React.Fragment>\n            <AppBar position=\"sticky\">\n                <Toolbar className={classes.bar}>\n                    <img src={logo} className={classes.logo} alt=\"Noam Swisa logo\"/>\n                </Toolbar>\n            </AppBar>\n        </React.Fragment>\n    )\n}","import * as React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n      imageStyle: {\n        maxHeight: \"500px\"\n      },\n      closeButtonStyle: {\n        float: \"right\",\n        padding: \"0\"\n      }\n    })\n);\n\ntype ImageModalProps = {\n  imageSource: string;\n  isOpen: boolean;\n  altTextForImage: string;\n  imageTitle?: string;\n  onClose(): void;\n};\n\nexport const ImageModal: React.FunctionComponent<ImageModalProps> = (\n  props: ImageModalProps\n) => {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Dialog onClose={props.onClose} open={props.isOpen}>\n        <DialogTitle>\n            {props.imageTitle}\n            <IconButton aria-label=\"close\" onClick={props.onClose} className={classes.closeButtonStyle}>\n                <CloseIcon />\n            </IconButton>\n        </DialogTitle>\n        <img src={props.imageSource} alt={props.altTextForImage} className={classes.imageStyle}/>\n      </Dialog>\n    </React.Fragment>\n  );\n};\n","import * as React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { ImageModal } from \"./imgModal\";\nimport LBB from \"../media/LBB.png\";\nimport ZPB from \"../media/ZPB.png\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      textAlign: \"center\",\n      padding: \"10px\"\n    },\n    header: {\n      marginBottom: \"7px\",\n      fontSize: \"36px\"\n    },\n    ptext: {\n      margin: \"0 150px 0 150px\",\n      lineHeight: \"25px\"\n    },\n    linkText: {\n      cursor: \"pointer\",\n      color: \"#8383b4\",\n      \"&:hover\": {\n        textDecoration: \"underline\"\n      }\n    }\n  })\n);\n\nexport const About: React.FunctionComponent = () => {\n  const classes = useStyles();\n  const [ziggyOpen, setZiggyOpen] = React.useState<boolean>(false);\n  const [ladyOpen, setLadyOpen] = React.useState<boolean>(false);\n\n  return (\n    <div className={classes.root}>\n      <h1 className={classes.header}>About Me</h1>\n      <p className={classes.ptext}>\n        I'm your local, friendly Brooklyner who happens to be a software\n        engineer. I attended CUNY Brooklyn College and graduated in 2018 with a\n        degree in Computer Science, and I currently work at JPMorgan Chase & Co.\n        My focus, as a developer, is primarily on web applications, with a\n        strong interest in user-centered UI design. I also care a lot about\n        making tech a more inclusive and welcoming space. In my free time, I\n        enjoy cross stitching, roller skating, and spoiling my dog,{\" \"}\n        <a\n          onClick={() => {\n            setLadyOpen(true);\n          }}\n          className={classes.linkText}\n        >\n          Lady Bird\n        </a>\n        , and my chinchilla,{\" \"}\n        <a\n          onClick={() => {\n            setZiggyOpen(true);\n          }}\n          className={classes.linkText}\n        >\n          Ziggy\n        </a>{\" \"}\n        to an absolutely unhealthy extent. In the time before covid-19, I might\n        have said I enjoyed travel, and didn't do it nearly enough. If you'd\n        like to collaborate (or conspire, mwahaha) with me on something, check out my contact info\n        here.\n      </p>\n      <ImageModal\n        isOpen={ladyOpen}\n        onClose={() => {\n          setLadyOpen(false);\n        }}\n        imageSource={LBB}\n        imageTitle=\"Lady Bird Bean\"\n        altTextForImage=\"photo of Lady Bird the dog\"\n      />\n      <ImageModal\n        isOpen={ziggyOpen}\n        onClose={() => {\n          setZiggyOpen(false);\n        }}\n        imageSource={ZPB}\n        imageTitle=\"Zigford P. Bean\"\n        altTextForImage=\"photo of Ziggy the chinchilla\"\n      />\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport headshot from \"../media/headshot.jpg\";\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        headshotPic: {\n          height: \"500px\",\n          width: \"40%\"\n        },\n        root: {\n          display: \"flex\",\n          flexDirection: \"row\"\n        },\n        bigBlock: {\n          backgroundColor: \"#000\",\n          padding: \"20px\",\n          textAlign: \"left\",\n          width: \"70%\"\n        },\n        header: {\n          color: \"#b3b3e6\",\n          marginTop: \"10%\",\n          marginBottom: \"3%\",\n          marginLeft: \"3%\",\n          fontSize: \"100px\"\n        },\n        ptext: {\n          color: \"#fff\",\n          fontSize: \"30px\",\n          marginLeft: \"3%\"\n        }\n    })\n);\n\nexport const Jumbotron: React.FunctionComponent = () => {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <img src={headshot} alt=\"Noams face lol\" className={classes.headshotPic} />\n      <div className={classes.bigBlock}>\n        <h1 className={classes.header}>Hi, I'm Noam!</h1>\n        <p className={classes.ptext}>Nice to meet you.</p>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { NavBar } from './components/header';\nimport { About } from './components/about';\nimport { Jumbotron } from './components/jumbotron';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Jumbotron/>\n      <About/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"fontsource-roboto\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes\n} from \"@material-ui/core/styles\";\n\nlet theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#2c2c2c\",\n      main: \"#000000\",\n      dark: \"#000000\",\n      contrastText: \"#fff\"\n    },\n    secondary: {\n      light: \"#e6e5ff\",\n      main: \"#b3b3ee\",\n      dark: \"#8284bb\",\n      contrastText: \"#000\"\n    }\n  }\n});\ntheme = responsiveFontSizes(theme);\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}